from flask import Blueprint, render_template, request, redirect, url_for, session, jsonify
from config.spotify import sp
from utils import get_playlist_tracks, create_playlist, add_tracks_to_playlist, display_playlists_ids_terminal, get_tracks_from_playlists

choose_playlists_profil = Blueprint("choose_playlists_profil", __name__)

@choose_playlists_profil.route("/choose/profile/playlists", methods=["GET", "POST"])
def index():
    playlists = sp.current_user_playlists()["items"]  # R√©cup√®re toutes les playlists

    return render_template("choose_playlists_profil.html", playlists=playlists, enumerate=enumerate)

@choose_playlists_profil.route("/save_selected_playlists", methods=["POST"])
def save_selected_playlists():
    """Stocke les playlists s√©lectionn√©es dans la session Flask"""

    try:
        data = request.get_json()
        print("üìå Donn√©es re√ßues :", data)  # ‚úÖ Debug : voir les donn√©es envoy√©es par JS

        # ‚úÖ Stocker en session Flask
        session["selected_playlists"] = data["playlists"]
        print(f"‚úÖ Playlists enregistr√©es en session : {session['selected_playlists']}")

        return jsonify({"message": "‚úÖ Playlists s√©lectionn√©es avec succ√®s !"}), 200
    
    except Exception as e:
        print(f"‚ùå Erreur c√¥t√© serveur : {e}")
        return jsonify({"error": "Erreur serveur"}), 500


@choose_playlists_profil.route("/process_playlists", methods=["POST"])
def process_playlists():
    """G√®re les actions apr√®s la s√©lection des playlists"""
    playlist_name = request.form.get("playlist_name")  # ‚úÖ R√©cup√©rer le nom entr√© par l'utilisateur
    operation = request.form.get("operation")

    if (operation == "intersect" or operation == "minus") and not playlist_name:
        return "‚ùå Vous devez entrer un nom pour la nouvelle playlist.", 400

    # Stocker la s√©lection dans une session pour pouvoir l'utiliser apr√®s redirection
    session["playlist_name"] = playlist_name if operation == "intersect" or operation == "minus" else None
    session["operation"] = operation
    
    if operation == "intersect":
        return redirect(url_for("choose_playlists_profil.create_intersection_playlist"))
    elif operation == "delete":
        return redirect(url_for("choose_playlists_profil.delete_playlists"))
    elif operation == "minus":
        return redirect(url_for("choose_playlists_profil.create_minus_playlist"))

    return "‚ùå Op√©ration inconnue.", 400

@choose_playlists_profil.route("/select_playlists", methods=["GET", "POST"])
def select_playlists():
    """Affiche les playlists et permet √† l'utilisateur de les choisir dans un ordre sp√©cifique"""
    playlists = sp.current_user_playlists()

    if request.method == "POST":
        user_input = request.form.get("selected_playlists")  # Exemple : "3,1,2"
        playlist_indexes = [i.strip() for i in user_input.split(",") if i.strip().isdigit()]

        if not playlist_indexes:
            return "‚ùå Aucune playlist valide s√©lectionn√©e.", 400

        selected_playlists = [playlists["items"][int(i) - 1]["id"] for i in playlist_indexes if int(i) - 1 < len(playlists["items"])]

        if len(selected_playlists) < 2:
            return "‚ùå Vous devez s√©lectionner au moins deux playlists.", 400

        # ‚úÖ Stocker les playlists s√©lectionn√©es dans l'ordre choisi
        session["selected_playlists"] = selected_playlists
        return redirect(url_for("choose_playlists_profil.index"))

    return render_template("choose_playlists.html", playlists=playlists, enumerate=enumerate)



# Intersection des playlists
@choose_playlists_profil.route("/create_intersection_playlist", methods=["GET"])
def create_intersection_playlist():
    """Cr√©e une playlist contenant uniquement les musiques pr√©sentes dans toutes les playlists s√©lectionn√©es"""
    selected_playlists = session.get("selected_playlists", [])
    playlist_name = session.get("playlist_name", "Playlist Intersect üé∂")  # ‚úÖ Utiliser le nom donn√© par l'utilisateur

    if not selected_playlists:
        return "‚ùå Aucune playlist s√©lectionn√©e.", 400


    user_id = sp.me()["id"]

    # R√©cup√©rer les morceaux de chaque playlist s√©lectionn√©e
    track_sets = get_tracks_from_playlists(sp, playlists=selected_playlists)

    # Trouver l'intersection des morceaux
    common_tracks = set.intersection(*track_sets) if track_sets else set()

    if not common_tracks:
        return "‚ùå Aucun morceau commun trouv√© entre les playlists s√©lectionn√©es.", 400

    # Cr√©er une nouvelle playlist avec le nom personnalis√©
    new_playlist_id = create_playlist(sp, user_id, playlist_name)

    # Ajouter les morceaux communs √† la playlist
    add_tracks_to_playlist(sp, new_playlist_id, list(common_tracks))

    return redirect(url_for("choose_playlists_profil.index"))


# Minus 
@choose_playlists_profil.route("/create_minus_playlist", methods=["GET"])
def create_minus_playlist():
    """Cr√©e une nouvelle playlist contenant toutes les musiques de la premi√®re playlist moins les musiques pr√©sentent dans les autres playlists"""
    """Minimum deux playlists requises"""
    selected_playlists = session.get("selected_playlists", [])
    playlist_name = session.get("playlist_name", "Playlist Minus üéµ")  # Nom personnalis√© de la nouvelle playlist

    if len(selected_playlists) < 2:
        return "‚ùå Au moins deux playlists doivent √™tre s√©lectionn√©es.", 400

    user_id = sp.me()["id"]

    # üéµ R√©cup√©rer les morceaux de chaque playlist s√©lectionn√©e
    track_sets = get_tracks_from_playlists(sp, playlists=selected_playlists)

    # üèÜ D√©terminer les morceaux √† conserver (ceux uniquement dans la premi√®re playlist)
    first_playlist_tracks = track_sets[0]  # üéØ Playlist principale
    other_playlists_tracks = set.union(*track_sets[1:])  # üî• Toutes les autres playlists combin√©es

    # üõë Supprimer de `first_playlist_tracks` les musiques pr√©sentes dans `other_playlists_tracks`
    unique_tracks = first_playlist_tracks - other_playlists_tracks

    if not unique_tracks:
        return "‚ùå Aucun morceau unique trouv√© dans la premi√®re playlist.", 400

    # üéº Cr√©er une nouvelle playlist
    new_playlist_id = create_playlist(sp, user_id, playlist_name)

    # ‚ûï Ajouter les morceaux restants √† la nouvelle playlist
    add_tracks_to_playlist(sp, new_playlist_id, list(unique_tracks))

    return redirect(url_for("choose_playlists_profil.index"))



# Suppression des playlists
@choose_playlists_profil.route("/delete_playlists", methods=["GET"])
def delete_playlists():
    """Supprime les playlists s√©lectionn√©es"""
    selected_playlists = session.get("selected_playlists", [])

    if not selected_playlists:
        return "‚ùå Aucune playlist s√©lectionn√©e.", 400

    for playlist_id in selected_playlists:
        try:
            sp.user_playlist_unfollow(sp.me()["id"], playlist_id)  # Supprime la playlist
            print(f"üóëÔ∏è Playlist supprim√©e : {playlist_id}")
        except Exception as e:
            print(f"‚ùå Erreur lors de la suppression de la playlist {playlist_id} : {e}")

    return redirect(url_for("choose_playlists_profil.index"))